"""
   Creates the triangular MESH for rectangular domains using simple
   transmissive boundary conditions (Ex, Liska-Wendroff test cases)
   using equilateral triangles
"""
import numpy as np
import matplotlib.pylab as plt

from DISTMESH import *
from Meshing_Tools import *
from CREATE_IDEAL_MESH_EQUI import *

class MESH:
    def __init__(self,x1,x2,y1,y2,h0):
        self.x1,self.x2,self.y1,self.y2 = x1,x2,y1,y2
        self.h0 = h0
    def __call__(self):
        x1,x2,y1,y2 = self.x1,self.x2,self.y1,self.y2
        h0 = self.h0
        # ----------------------------------------------------------
        #                   CREATE THE MESH
        # ----------------------------------------------------------

        create_mesh = CREATE_IDEAL_MESH_EQUI(x1,x2,y1,y2,h0)
        p,tri,bbars = create_mesh()

        # -----------------------------------------------------------
        #   Add Ghost Triangles to define the Boundary Conditions
        # -----------------------------------------------------------

        # p: nodes of the mesh generated by distmesh

        geo = GEOMETRY(p,tri)
        area, e01,e12,e20,ang01,ang12,ang20 = geo()

        gboundary = GHOSTS(p,tri,bbars,e01,e12,e20,ang01,ang12,ang20)
        btri,tghost,comp_p,comp_tri = gboundary()

        # Notice that the node array 'comp_p' now includes also the additional
        # nodes of the ghost triangles added to the boundary

        matched_pairs = matching_pairs(bbars,comp_tri)
        # Note: len(matched_pairs) = len(bbars) = len(tghost)
        #    if matched_pairs[i] = [43,12], this means that the
        #    comp_tri[43] is the ghost triangle abutted to the
        #    comp_tri[12] triangle inside the physical space

        neighbors = vecinos(bbars,comp_tri)

        plot_ghosts(comp_p,tghost)

        return tri,p,neighbors,matched_pairs,area,e01,e12,e20,ang01,ang12,ang20

