function [ke, rq] = BVPQuad8Element(kx, ky, p, q, coord)
% [ke, rq] = BVPQuad8Element(kx, ky, p, q, coord)
% Generates for a 8 node quadrilateral element for 2d BVP
% kx, ky, p, q = parameters defining the BVP
% coord = coordinates at the element ends

% Use 3x3 integration. Gauss point locations and weights
gpWts = [5/9, 8/9, 5/9];
gpLocs = [-sqrt(3/5),-sqrt(3/5); 0,-sqrt(3/5); sqrt(3/5),-sqrt(3/5);
    -sqrt(3/5),0; 0,0; sqrt(3/5),0;
    -sqrt(3/5),sqrt(3/5); 0,sqrt(3/5); sqrt(3/5),sqrt(3/5)];
gpWts = [5/9 * 5/9, 8/9 * 5/9, 5/9 * 5/9, ...
        5/9 * 8/9, 8/9 * 8/9, 5/9 * 8/9, ...
        5/9 * 5/9, 8/9 * 5/9, 5/9 * 5/9];
kk=zeros(8); kp=zeros(8); rq=zeros(8,1);
for i=1:length(gpWts)
    s = gpLocs(i, 1); t = gpLocs(i, 2); w = gpWts(i);
    n = [((1 - s)*(1 - t))/4 - ((1 - s^2)*(1 - t))/4 - ...
            ((1 - s)*(1 - t^2))/4, ((1 - s^2)*(1 - t))/2, ...
            ((1 + s)*(1 - t))/4 - ((1 - s^2)*(1 - t))/4 - ...
            ((1 + s)*(1 - t^2))/4, ((1 + s)*(1 - t^2))/2, ...
            ((1 + s)*(1 + t))/4 - ((1 - s^2)*(1 + t))/4 - ...
            ((1 + s)*(1 - t^2))/4, ((1 - s^2)*(1 + t))/2, ...
            ((1 - s)*(1 + t))/4 - ((1 - s^2)*(1 + t))/4 - ...
            ((1 - s)*(1 - t^2))/4, ((1 - s)*(1 - t^2))/2];
    dns=[(s*(1 - t))/2 + (-1 + t)/4 + (1 - t^2)/4, -(s*(1 - t)), ...
            (1 - t)/4 + (s*(1 - t))/2 + (-1 + t^2)/4, (1 - t^2)/2, ...
            (1 + t)/4 + (s*(1 + t))/2 + (-1 + t^2)/4, -(s*(1 + t)), ...
            (-1 - t)/4 + (s*(1 + t))/2 + (1 - t^2)/4, (-1 + t^2)/2];
    dnt=[(-1 + s)/4 + (1 - s^2)/4 + ((1 - s)*t)/2, (-1 + s^2)/2, ...
            (-1 - s)/4 + (1 - s^2)/4 + ((1 + s)*t)/2, -((1 + s)*t), ...
            (1 + s)/4 + (-1 + s^2)/4 + ((1 + s)*t)/2, (1 - s^2)/2, ...
            (1 - s)/4 + (-1 + s^2)/4 + ((1 - s)*t)/2, -((1 - s)*t)];
    x = n*coord(:,1); y = n*coord(:,2);
    dxs = dns*coord(:,1); dxt = dnt*coord(:,1);
    dys = dns*coord(:,2); dyt = dnt*coord(:,2);
    J = [dxs, dxt; dys, dyt]; detJ = det(J);
    bx = (J(2, 2)*dns - J(2, 1)*dnt)/detJ;
    by = (-J(1, 2)*dns + J(1, 1)*dnt)/detJ;
    b = [bx; by];
    c = [kx, 0; 0, ky];
    kk = kk + detJ*w* b'*c*b;
    kp = kp - detJ*w*p * n'*n;
    rq = rq + detJ*w*q * n';
end
ke=kk+kp;
