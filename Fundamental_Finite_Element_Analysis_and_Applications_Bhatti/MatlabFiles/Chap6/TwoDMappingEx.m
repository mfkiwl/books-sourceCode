% Mapping for a quadrilateral defined by the following eight points 
pts = [0.5, 0.5; 1.1, 1.6; 1.7, 2.1; 1.5, 2.5; 1.1, 2.8;
    .75, 2.5; .5,2.5; .25, 1.5];
xn=pts(:,1); yn= pts(:,2);
map=[];
for s=-1:1/10:1
    for t=-1:1/10:1
        % 8 node serendipity interpolation functions 
        n = [-((-1 + s)*(-1 + t)*(1 + s + t))/4, ...
                ((-1 + s^2)*(-1 + t))/2, ...
                ((-1 + t)*(1 - s^2 + t + s*t))/4,...
                -((1 + s)*(-1 + t^2))/2, ...
                ((1 + s)*(1 + t)*(-1 + s + t))/4, ...
                -((-1 + s^2)*(1 + t))/2, ...
                ((-1 + s)*(1 + s - t)*(1 + t))/4,...
                ((-1 + s)*(-1 + t^2))/2];
        dns = [-((-1 + t)*(2*s + t))/4, s*(-1 + t), ...
                ((-1 + t)*(-2*s + t))/4,...
                (1 - t^2)/2, ((1 + t)*(2*s + t))/4, ...
                -(s*(1 + t)), ((2*s - t)*(1 + t))/4, ...
                (-1 + t^2)/2];
        dnt = [((-1 + s)*(s + 2*t))/4, (-1 + s^2)/2, ...
                -((1 + s)*(s - 2*t))/4,...
                -((1 + s)*t), ((1 + s)*(s + 2*t))/4, ...
                (1 - s^2)/2, ...
                ((-1 + s)*(s - 2*t))/4, (-1 + s)*t];
        x = n*xn; y=n*yn; 
        dxs=dns*xn; dxt=dnt*xn;
        dys=dns*yn; dyt=dnt*yn; J=[dxs, dxt; dys, dyt]; detJ = det(J);
        map=[map; [s, t, x, y, detJ]];
    end
end
detJ=[]; x=[]; y=[];
for i=1:21:length(map)
    x = [x, map(i:i+20,3)];
    y = [y, map(i:i+20,4)];
    detJ = [detJ, map(i:i+20,5)];
end
% Plot quadrilateral from mapped coordinates
% The surface plot shows detJ values
clf
hold on
mesh(x,y, zeros(length(x)));
mesh(x,y, detJ)
title('Jacobian over mapped element')
xlabel('x'); ylabel('y'); zlabel('detJ')
hold off